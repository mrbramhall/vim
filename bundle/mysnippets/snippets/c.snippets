## My personal snippets for C programming language

## Standard C language constructs
# if
snippet mif
	if(${1}) {
		${2}
	}
# else
snippet mel
	else {
		${1}
	}
# if-else clause
snippet mifel
	if(${1}) {
		${2}
	} else {
		${3}
	}
# else if
snippet melif
	else if(${1}) {
		${2}
	}
# if inline
snippet mifi
	if(${1}) { ${2}; }
# else inline
snippet meli
	else { ${1}; }
# if-else clause inline
snippet mifeli
	if(${1}) { ${2}; }
	else { ${3}; }
# switch
snippet mswitch
	switch(${1}) {
		case ${2}:
			${3}
			break;
		default:
			${4}
	}
# for
snippet mfor
	for(${1:i}${2: = 0}; $1${3: < count}; $1${4:++}) {
		${5}
	}
# for empty
snippet mfore
	for(${1}; ${2}; ${3}) {
		${4}
	}
# while
snippet mwh
	while(${1}) {
		${2}
	}
# do... while
snippet mdo
	do {
		${2}
	} while(${1});
# header include guard
snippet monce
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${0}

	#endif
# typedef struct
snippet mtds
	typedef struct ${2:$1 }{
		${3}
	} ${1:TypeName};
# typedef function
snippet mtdf
	typedef ${1:void} (*${2:FunctionTypeName})(${3});
# return
snippet r
	return 
## Unique snippets for personal configurations
# tests file skeleton
snippet testf
	#include "minunit.h"
	/* additional includes go here */
	
	/* variables go here */
	
	/* test functions go here */
	
	char *all_tests()
	{
		mu_suite_start();

		mu_run_test(test_${1:function});${2}

		return NULL;
	}
	
	RUN_TESTS(all_tests);
# test function skeleton
snippet test
	char *test_${1:function}()
	{
		${2}

		return NULL;
	}
# mu_assert test macro
snippet m
	mu_assert(${1:/* condition */}, "${2:error message}");
# check macro
snippet c
	check(${1:/* condition */}, "${2:error message}"${3});
# check_mem macro
snippet cm
	check_mem(${1:/* variable */});
# assert
snippet a
	assert(${1:/* condition */} && "${2:error message}");
# debug
snippet d
	debug("${1:/* debug message */}"${2});
