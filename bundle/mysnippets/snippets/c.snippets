##
## Main
# main
snippet main
	int main(int argc, const char *argv[])
	{
		${0}

		return 0;
	}
# main(void)
snippet mainn
	int main(void)
	{
		${0}

		return 0;
	}
##
## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`Filename("$1")`}.h"
# ifndef...define...endif
snippet ifndef
	#ifndef ${1:SYMBOL}
	${0}
	#endif
# define
snippet def
	#define ${0}
# ifdef...endif
snippet ifdef
	#ifdef ${1}
	${0}
	#endif
# if
snippet #if
	#if ${1}
	${0}
	#endif
# header include guard
snippet once
	#ifndef ${1:`Filename('_$1_h', 'untitled_h')`}
	#define $1

	${0}

	#endif /* $1 */
##
## Control Statements
# if
snippet if
	if(${1:/* condition */}) {
		${0}
	}
# else
snippet el
	else {
		${0}
	}
# else if
snippet elif
	else if(${1:/* condition */}) {
		${0}
	}
# if inline
snippet ifi
	if(${1:/* condition */}) ${2};
# else inline
snippet eli
	else ${1};
# else if inline
snippet elifi
	else if(${1:/* condition */}) ${2};
# ternary
snippet t
	${1:/* condition */} ? ${2:true} : ${3:false}
# switch
snippet sw
	switch(${1:/* variable */}) {
		${0}
		default:
			break;
	}
# case
snippet case
	case ${1:/* value */}:
		${0}
		break;
# case no break
snippet casen
	case ${1:/* value */}:
##
## Loops
# for
snippet for
	for(${1:i}${2: = 0}; $1${3: < count}; $1${4:++}) {
		${0}
	}
# for empty
snippet fore
	for(${1}; ${2}; ${3}) {
		${0}
	}
# while
snippet wh
	while(${1:/* condition */}) {
		${0}
	}
# do... while
snippet do
	do {
		${0}
	} while(${1:/* condition */});
##
## Functions
# function definition
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${0}
	}
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});
##
## Types
# typedef
snippet td
	typedef ${1:int} ${2:TypeName};
# struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${0}
	};
# typedef struct
snippet tds
	typedef struct ${2:$1} {
		${0}
	} ${1:StructTypeName};
# typedef function
snippet tdf
	typedef ${1:void} (*${2:FunctionTypeName})(${3});
# typedef enum
snippet tde
	typedef enum {
		${1}
	} ${2:EnumTypeName};
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
##
## Personal Configurations
# tests file skeleton
snippet testf
	#include "minunit.h"
	/* additional includes go here */
	
	/* variables go here */
	
	/* test functions go here */
	
	char *all_tests()
	{
		mu_suite_start();

		mu_run_test(test_${1:FUNCTION});${0}

		return NULL;
	}
	
	RUN_TESTS(all_tests);
# test function skeleton
snippet test
	char *test_${1:FUNCTION}()
	{
		${0}

		return NULL;
	}
# mu_assert test macro
snippet mua
	mu_assert(${1:/* condition */}, "${2:error message}"${3});
# check macro
snippet ch
	check(${1:/* condition */}, "${2:error message}"${3});
# check_mem macro
snippet chm
	check_mem(${1:/* variable */});
# check debug
snippet chd
	check_debug(${1:/* condition */}, "${2:error message}"${3});
# assert
snippet as
	assert(${1:/* condition */} && "${2:error message}");
# debug
snippet de
	debug("${1:/* debug message */}"${2});
